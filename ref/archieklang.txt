ArchieKlang
~~~

Questions:
- What happens to samples that go off the end?
E.g. in Chord Gen there is a shift (offset) value - this can easily go off the end once Note 12 is included (sample index *2). ==> presume 0 sample byte.

- Looks like a small precision error with LoopGen vs C code?
  Trying to lerp but from 0x7fff to 0x0.


TODO:
- Implement remaining nodes
    - Distortion
    - 1-pole filter
    - ADSR envelope
- Implement external samples - DONE
- Test all example MODs - IN PROGRESS
    - calcpreculation.mod -                     BUILT: PASSED! (after RE-EXPORT)
    - JosSs-Cream.mod -                         BUILT: 2/21 errors (max 1)
    - JosSs-DualPanoply.mod -                   BUILT: PASSED! (notch)
    - juice-tremors.mod -                       BUILT: PASSED! (after RE-EXPORT)
    - nah-kolor 'on fire'.mod -                 BUILT: 4/28 errors (max 3) <= CHORDGEN
    - optimal workflow.mod -                    BUILT: 3/28 errors (max 2) <= CHORDGEN
    - tecon-disco transmission.mod -            BUILT: PASSED! (register clash)
    - Virgill&Maze-national waffle day.mod -    BUILT: PASSED!
    - Virgill-80s architecture.mod -            BUILT: 1/27 errors (max 1) - RE-EXPORTED
    - Virgill-amigahub.mod -                    BUILT: PASSED! (w/ REVERSE SAMPLE BODGE)
    - Virgill-atariklang.mod -                  BUILT: PASSED! (w/ STATIC BUG WORKAROUND + RE-EXPORTED)
    - Virgill-colombia.mod -                    BUILT: 2/25 errors (max 10) <= CHORDGEN
    - Virgill-mothership.mod -                  BUILT: PASSED!
    - Virgill-nihil admirari.mod -              BUILT: PASSED!
    - Virgill-redrum redrum.mod -               BUILT: PASSED!
- Implement 16-bit linear to 8-bit log conversion.
- Smaller code implementation w/ parameterised fn calls rather than inline.
- Tidy up documentation
- Replacement aklang2asm.bat for Archie - IN PROGRESS
- Contact Virgill - IN PROGRESS

CloneReverse is bugged:
In AmigaKlangGUI the sample data is held in separate arrays.
In AmigaKlangGUI the loopgen code writes beyond the length of the sample by +2.
Clone Reverse reads one byte beyond the end of the cloned sample.
In AmigaKlangGUI this is fine as it contains the overrun sample data.
In runtime implementations this reads the first byte of the next sample.
Only solution for this would be to store the extra byte somewhere after doing loopgen.
Then special case reading this byte...
Or just ask Virgill why the AmigaKlangGUI has the +2 offset in loopgen.
And stop the clone reverse from reading over the end of the sample...

Other bugs:
The runtime implemation synth() function the loop runs one byte too far due to smp <= SmpLength[..]
This means an extra iteration of the noise generator per node per instrument.
Which makes the noise go out of sync with the AmigaKlangGui.

Static counter buf in cmb_flt_n and dly_cyc never gets reset.

Using reverb and dly_cyc uses more than 8 buffers so need larger temporary workspace...

osc_noise uses static vars for seeds, so these continue to iterate during use of the GUI.
